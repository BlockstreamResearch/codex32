%!PS-Adobe-3.0
%%Orientation: Portrait
%%Pages: 27
%%EndComments
%%BeginSetup
(SSS32)
(revision alpha-4.5)
[
(MIT License)
()
(Copyright (c) 2020 Blockstream)
()
(Permission is hereby granted, free of charge, to any person obtaining a copy)
(of this software and associated documentation files (the "Software"), to deal)
(in the Software without restriction, including without limitation the rights)
(to use, copy, modify, merge, publish, distribute, sublicense, and/or sell)
(copies of the Software, and to permit persons to whom the Software is)
(furnished to do so, subject to the following conditions:)
()
(The above copyright notice and this permission notice shall be included in all)
(copies or substantial portions of the Software.)
()
(THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR)
(IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,)
(FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE)
(AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER)
(LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,)
(OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE)
(SOFTWARE.)
]
[
(WARNING: Seriously, this is a work in progress, and it is only a concept right now.)
(If you try to use this for your valuable data, I promise you will lose your data.)
(You will lose this document and come back here only to find that I have made incompatible changes,)
(and your data is lost forever. Even if you don't lose this document, there is no warranty or)
(guarantee of any kind that you will be able to recover successfully recover your data.)
]
[
(MATERIALS: Scissors, X-Acto knife, brass fasteners)
()
(CONSTRUCTION:)
(The bottom discs are the discs with a small circle in the center of them.)
(The top discs are the discs with a small cross in the centre. All the top discs are identical. Cut out each disc.)
(Cut out the small centre circle in each the bottom discs. Cut out each of the 32 squares of each top disc.)
(Cut a slit along one one of the small lines of the cross in each of the top discs.)
(Pass the brass fastener through a top disc and bottom disc.)
(Fold the legs of the fastener apart to secure the top and bottom discs together.)
(The two discs should now be able to rotate about their common centre.)
()
(SECRET RECOVERY:)
(Find 2 of your secured shares.)
(Make sure all your shares have the same identifier and a valid checksum (see checksum worksheet).)
(Dial the recover share disc to the share index of the first secured share (the 5th character).)
(Look up the symbol associated with the share index of the other share.)
(Set your translation disc to that symbol and translate the first secured share by looking up every charater in turn.)
(Dial the recover share disc to the share index of the second secured share (the 5th character).)
(Look up the symbol associated with the share index of the first share.)
(Set your translation disc to that symbol and translate the second secured share by looking up every charater in turn.)
(Add the two translated shares, character by character, using the Addition disc.)
(The result is your secret share and will have share index S and a valid checksum.)
]
/README exch def
/warning exch def
/MIT exch def
/ver exch def
/name exch def

/pgsize {612 792} def % letter size
/magic 94 def % a magic angle for making nice looking spirals.
/code (QPZRY9X8GF2TVDW0S3JN54KHCE6MUA7L ) def
/code2 (\264\300abcdefghijklmnopqrstuvwxyz\247\250\251\252 ) def
/perm [29 24 13 25 9 8 23 18 22 31 27 19 1 0 3 16 11 28 12 14 6 4 2 15 10 17 21 20 26 30 7 5 ] def
/permS [16 29 24 13 25 9 8 23 18 22 31 27 19 1 0 3 11 28 12 14 6 4 2 15 10 17 21 20 26 30 7 5 ] def
/permV [22 11 10 29 31 28 17 24 27 12 21 13 19 14 20 25 1 6 26 9 0 4 30 8 3 2 7 23 16 15 5 18 ] def
/permP [0 1 2 4 8 16 9 18 13 26 29 19 15 30 21 3 6 12 24 25 27 31 23 7 14 28 17 11 22 5 10 20] def
% Generator for GF(32) is alpha^5 = alpha^3 + 1

/gf32add % x y -> x [+] y where [+] is addition in GF32.
         % returns 32 if x or y is out of range.
         % Note that x [+] y = x [-] y in GF32.
{               % x y
 2 copy 32 ge   % x y x (y >= 32)
 exch 32 ge or  % x y (y >= 32 || x >= 32)
 {pop pop 32}     % 32
 {xor}            % x [+] y
 ifelse         % if (y >= 32 || x >= 32) then 32 else (x [+] y)
} bind def

/gf32mulalpha % x -> x [*] alpha where [*] is multiplicaiton in GF32 and alpha is represted by 0b00010.
{               % x
 2 mul          % 2*x
 dup 32 ge      % 2*x (2*x >= 0b100000)
 { 41 xor }       % 2*x `xor` 0b101001
 if             % if (2*x >= 0xb100000) then 2*x `xor` 0x0b101001 else 2*x
} bind def

/gf32mul % x y -> x [*] y where [*] is multiplication in GF32.
         % returns 32 if x or y is out of range.
{                % x y
 10 dict begin
 { /y /x } {exch def} forall
 x 32 ge y 32 ge or  % (y >= 32 || x >= 32)
 {32}                  % 32
 {
   /xShift x def
   /yAlpha y def
   0                   % 0
   5 {                                % ((x & 0b001..1) [*] y) (x >> i) (y [*] alpha[^i])
     xShift 1 and yAlpha mul xor      % ((x & 0b001..1) [*] y [+] ((x >> i) & 1) * (y [*] alpha [^i]))
     /xShift xShift -1 bitshift def
     /yAlpha yAlpha gf32mulalpha def
   } repeat            % ((x & 0b11111) [*] y)
 } ifelse            % if (y >= 32 || x >= 32) then 32 else (x [*] y)
 end
} bind def

/gf32inv % x -> x [^-1] where [^-1] is the inverse operation in GF32.
         % returns 0 when given 0.
         % returns 32 if x is out of range.
{                        % x
 dup dup gf32mul         % x x[^2]
 dup gf32mul gf32mul     % x[^5]
 dup dup gf32mul gf32mul % x[^15]
 dup gf32mul             % x[^30]
                         % x[^-1]
} bind def

/lagrange % x xj [x[0] .. x[k]] -> l[j](x)
          % returns the lagrange basis polynomial l[j] evaluated at x for interpolation of coordinates [x[0] .. x[k]].
          % Requires xj `elem` [x[0] ... x[k]]
{               % x xj [x[0] .. x[k]]
 10 dict begin
 { /xs /xj /x } {exch def} forall
 1 xs           % 1 [x[0] .. x[k]]
 {                % let P = product [(x [-] x[m]) [/] (xj [-] x[m]) | m <- [0..i-1], x[m] /= xj]
                  % P x[i]
   /xi exch def   % P
   xi xj gf32add  % P (xj [-] x[i])
   dup 0 eq       % P (xj [-] x[i]) (xj [-] x[i] == 0)
   { pop }                 % P
   { gf32inv gf32mul       % (P [/] (xj [-] x[i])
     xi x gf32add gf32mul  % (P [*] (x [-] x[i]) [/] (xj [-] x[i]))
   }
   ifelse         % (if xj == x[i] then P else (P [*] (x [-] x[i]) [/] (xj [-] x[i]))
 } forall       % x xj (product [(x [-] x[m]) [/] (xj [-] x[m]) | m <- [0..k], x[m] /= xj])
 end
} bind def

/makeShare % sS sA i -> si
       { 3 2 roll 1 index permS 0 get permS 0 2 getinterval lagrange gf32mul
         3 1 roll permS 1 get permS 0 2 getinterval lagrange gf32mul
         xor
       } bind def

/gf32mularray % x b -> x * b
  { [ 3 1 roll { 1 index gf32mul exch } forall pop ]
  } bind def

/gf32addarray % a b -> a + b pointwise
  { [ 3 1 roll 0 1 2 index length 1 sub { 2 index 1 index get 2 index 2 index get gf32add exch pop 3 1 roll } for pop pop ]
  } bind def

/polymodulus [31 5 3 28 0 31 31 31 9 5 30 2 2] def % coefficents from c12 to c0
/checksum [16 25 24 3 25 11 16 23 29 3 25 17 10] def
/checksumstring { polymodulus length string checksum 0 1 polymodulus length 1 sub {3 copy exch 1 index get code exch 1 getinterval putinterval pop } for pop } bind def

/polymod0 % array -> [ c5 c4 c3 c2 c1 c0 ]
 { [ polymodulus length {0} repeat ]
   exch
   { [ exch 2 index 1 polymodulus length 1 sub getinterval aload pop polymodulus length dup 1 sub roll ] exch 0 get polymodulus gf32mularray gf32addarray  } forall
 } bind def

/polymodshift2 % c7 c6 -> [ c5 c4 c3 c2 c1 c0 ]
 {  [ 3 1 roll polymodulus length {0} repeat ] polymod0
 } bind def

/polymodhrp % string -> [ c5 c4 c3 c2 c1 c0 ]
 {
   [ exch 1 exch dup { 32 idiv exch } forall 0 exch { 31 and } forall ] polymod0
 } bind def

/underlineshow {
    dup dup (6) eq exch (9) eq or { % if the string is (6) or (9)
        gsave (_) show grestore % draw an underline
    } if
    show
} bind def
/centreshow {dup stringwidth pop 2 div neg 0 rmoveto underlineshow} bind def
/centresquare {dup neg 2 div dup rmoveto dup 0 rlineto dup 0 exch rlineto neg 0 rlineto closepath stroke} bind def
/concatstrings % (a) (b) -> (ab)
   { exch dup length
     2 index length add string
     dup dup 4 2 roll copy length
     4 -1 roll putinterval
   } bind def

% From BLUEBOOK Program #10
/outsidecircletext
  { circtextdict begin
      /radius exch def
      /centerangle exch def
      /ptsize exch def
      /str exch def
      /xradius radius ptsize 4 div add def

      gsave
        centerangle str findhalfangle add rotate

        str
          { /charcode exch def
            ( ) dup 0 charcode put outsideplacechar
          } forall
      grestore
    end
  } def

/insidecircletext
{ circtextdict begin
  /radius exch def /centerangle exch def
  /ptsize exch def /str exch def
  /xradius radius ptsize 3 div sub def
  gsave
   centerangle str findhalfangle sub rotate
   str
    { /charcode exch def
      ( ) dup 0 charcode put insideplacechar
    } forall
  grestore
  end
} def

/circtextdict 16 dict def
circtextdict begin
 /findhalfangle
  { stringwidth pop 2 div
    2 xradius mul pi mul div 360 mul
  } def

/outsideplacechar
    { /char exch def
      /halfangle char findhalfangle def
      gsave
        halfangle neg rotate
        radius 0 translate
        -90 rotate
        char stringwidth pop 2 div neg 0 moveto
        char show
      grestore
      halfangle 2 mul neg rotate
    } def

/insideplacechar
 { /char exch def
   /halfangle char findhalfangle def
   gsave
    halfangle rotate
    radius 0 translate
    90 rotate
    char stringwidth pop 2 div neg 0 moveto
    char show
   grestore
   halfangle 2 mul rotate
 } def

/pi 3.1415923 def
end

/drawBottomWheelPage
 { 10 dict begin
   /outerperm exch def
   /outercode exch def
   /outerfont exch def
   /innercode exch def
   /innerfont exch def
   /title exch def
   /binop exch def
   /angle 360 outerperm length div neg def
   % Move cursor to center of page
   pgsize 2 div exch 2 div exch translate
   % Draw white interior circle
   newpath 0 0 6 40 mul 0 360 arc stroke
   newpath 0 0 6 40 mul 28 add 0 360 arc stroke
   newpath 0 0 6 0 360 arc stroke
   % Draw title (small text, repeated)
   /Helvetica findfont 12 scalefont setfont
   title 12 270 30 insidecircletext
   % Draw letters (using human-centric ABCD... permutation)
   /Helvetica findfont 6 scalefont setfont
   gsave
   360 16 div 360 64 div sub rotate
   0 360 8 div 360 {title 6 2 index 262 outsidecircletext} for
   grestore
   outerfont findfont 18 scalefont setfont
   outerperm {0 38 sqrt 40 mul moveto outercode exch 1 getinterval centreshow angle rotate} forall
   % Draw inside contents
   innerfont findfont 12 scalefont setfont
   180 rotate
   0 1 31 { % Draw 32 circles of increasing radius
       magic rotate
       outerperm {
           0 2 index 2 add sqrt 40 mul moveto % move to 0, 2.5 + 40*sqrt(outer index + 2)
           1 index 31 exch sub % 31 - inner index
           permV exch get binop % apply binary operation to the permuted letter and the inner index
           innercode exch 1 getinterval centreshow % display the result
           angle rotate % rotate one entry
       } forall pop
   } for
   end
 } bind def

/showTopWheelPage
 {
   % Move cursor to center of page
   pgsize 2 div exch 2 div exch translate
   % Draw gray "handle" and white interior circle
   0.8 setgray
   newpath 0 0 7.25 40 mul 140 40 arc fill
   1 setgray
   newpath 0 0 6 40 mul 0 360 arc fill
   0 setgray
   newpath 0 0 6 40 mul 0 360 arc stroke
   % Draw centre cross
   newpath 0 6 moveto 0 -6 lineto stroke
   newpath 6 0 moveto -6 0 lineto stroke
   % Draw indicator arrow
   newpath 0 6 40 mul moveto 10 -20 rlineto -20 0 rlineto closepath fill
   % Draw text
   /Courier findfont 12 scalefont setfont
   180 rotate
   0 1 31 {
       magic rotate
       dup 2 add sqrt 40 mul 2.5 add % lam = 2.5 + 40*sqrt(idx + 2)
       newpath
       0 exch % set midpoint: 0 lam
       2 copy moveto
       12 centresquare % draw square
       moveto % return to midpoint
       -26 -3 rmoveto % Move to the left
       31 exch sub % 31 - loop index
       permV exch get code exch 1 getinterval % Permute index and extract 1-char substring of alphabet
       /Courier findfont 12 scalefont setfont underlineshow % ...and draw it
       (\256) /Symbol findfont 12 scalefont setfont show % Draw a right arrow
   } for
   showpage
 } bind def

/showShareTable {
/offsety exch def
/offsetx exch def
/page exch def
/Courier findfont 10 scalefont setfont
20 offsetx add offsety moveto (Page: ) show
/Courier-Bold findfont 8 scalefont setfont
code page 1 getinterval show
2 1 31 {
dup 7 mul offsetx add offsety 10 sub moveto
permS exch get
code exch 1 getinterval show
} for

0 1 31 {
/Courier-Bold findfont 8 scalefont setfont
offsetx offsety 20 sub 2 index 8 mul sub moveto
dup code exch perm exch get 1 getinterval show
/Courier findfont 8 scalefont setfont
2 1 31 {
dup 7 mul offsetx add offsety 20 sub 3 index 8 mul sub moveto
permS exch get
page exch perm 3 index get exch  makeShare code exch 1 getinterval show
} for pop } for
} bind def

/showShareTablePage {
325 400 showShareTable
50 400 showShareTable
325 720 showShareTable
50 720 showShareTable
showpage
} bind def

/arraySpace 13 def
/showArray {
  10 dict begin
  { /l /n /word /y /x } {exch def} forall
  word n l getinterval
    { x y moveto code exch 1 getinterval show
      /x x arraySpace add def
    } forall
  end
} bind def

/showBox {
  10 dict begin
  { /l /n /word /y /x /decoration } {exch def} forall
  l { x y moveto n decoration
      /x x arraySpace add def
      /n n 1 add def
    } repeat
  end
} bind def

/showArrayBox {
  6 copy showBox
  showArray pop
} bind def

/drawParagraph {
  10 dict begin
  { /lines /title /height /width /y /x } {exch def} forall
  x y moveto
  /Helvetica findfont 20 scalefont setfont
  title show
  x y 20 sub moveto
  /Times findfont 12 scalefont setfont
  lines {
    gsave
    dup stringwidth pop width exch div % Determine scaling factor
    dup 1.1 lt 1 index 1.0 gt and % If the scaling factor is between 1 and 1.1
    { 1 scale } { pop } ifelse % then apply it
    show
    grestore 0 height neg rmoveto
  } forall
  end
} bind def


% Draw the table
/draw3tablecell {
  10 dict begin
  { /c /b /a /y /x } {exch def} forall

  x y moveto

  % Permute a/b/c
  /a permS a get def
  /b permS b get def
  /c permS c get def

  /Courier findfont 8 scalefont setfont
  code a 1 getinterval show
  code b 1 getinterval show
  code c 1 getinterval show
  (:) show
  4 0 rmoveto

  /la 16 a [a b c] lagrange def
  /lb 16 b [a b c] lagrange def
  /lc 16 c [a b c] lagrange def

  /Symbol findfont 8 scalefont setfont
  code2 la 1 getinterval gsave centreshow grestore
  6 0 rmoveto
  code2 lb 1 getinterval gsave centreshow grestore
  6 0 rmoveto
  code2 lc 1 getinterval gsave centreshow grestore

  end
} bind def

/draw3tablecolumn % astart bstart cstart x y count -> aend bend cend
{
  10 dict begin
  { /rows /y /x /c /b /a } {exch def} forall

  1 1 rows { % for
      pop % drop the array index

      x y a b c draw3tablecell
      /y y 9.25 sub def

      /c c 1 add def
      c 32 eq {
          /b b 1 add def
          b 31 eq {
              /a a 1 add def
              /b a 1 add def
          } if
          /c b 1 add def
      } if
  } for

  a b c % Leave a b c on the stack for the next call
  end
} bind def
%%EndSetup

%%Page: 1 1
/Helvetica findfont 6 scalefont setfont
40 750 moveto
MIT {gsave show grestore 0 -8 rmoveto} forall
/Helvetica findfont 20 scalefont setfont
0 -22 rmoveto
gsave name show grestore 0 -12 rmoveto
/Helvetica findfont 10 scalefont setfont
gsave ver show grestore 0 -16 rmoveto
/Helvetica findfont 6 scalefont setfont
warning {gsave show grestore 0 -7 rmoveto} forall
0 -16 rmoveto
/Helvetica findfont 8 scalefont setfont
README {gsave show grestore 0 -10 rmoveto} forall
showpage

%%Page: 2 2

10 dict begin
  250 450
  /offsety exch def
  /offsetx exch def
  /Helvetica findfont 15 scalefont setfont
  20 offsetx add offsety moveto (Multiplication Table) show
  1 1 31 {
    /Symbol findfont 8 scalefont setfont
    offsetx 34.5 7 mul add offsety 5 sub 2 index 8 mul sub moveto
    dup code2 exch 1 getinterval show
    /Symbol findfont 8 scalefont setfont
    dup 1 31 {
    dup 2 add 7 mul offsetx add offsety 5 sub 3 index 8 mul sub moveto
    1 index gf32mul code2 exch 1 getinterval show
  } for pop } for
end

10 dict begin
%cat <<EOF | tbl | groff -Tps
%Dice Tables
%
%1d4;1d8
%.TS
%box;
%cFCW || cFCW | cFCW | cFCW | cFCW | cFCW | cFCW | cFCW | cFCW.
%        1       2       3       4       5       6       7       8
%=
%1       Q       P       Z       R       Y       9       X       8
%_
%2       G       F       2       T       V       D       W       0
%_
%3       S       3       J       N       5       4       K       H
%_
%4       C       E       6       M       U       A       7       L
%.TE
%
%2d6
%.TS
%box;
%cFCW || cFCW | cFCW | cFCW | cFCW | cFCW | cFCW.
%        1       2       3       4       5       6
%=
%1               Q       P       Z       R
%_
%2       Y       9       X       8       G       F
%_
%3       2       T       V       D       W       0
%_
%4       S       3       J       N       5       4
%_
%5       K       H       C       E       6       M
%_
%6               U       A       7       L
%.TE
%EOF
/SC 32 def
/E{0 rmoveto show}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Cg/setgray load def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/LW/setlinewidth load def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/BP{
1 setlinecap
1 setlinejoin
0 792 translate
1 -1 scale
}bind def
/EP{
showpage
}def
BP

/F0 10/Courier SF(Dice T)72 12 Q(ables)-.8 E(1d4;1d8)72 36 Q .4 LW
256 40.5 72 40.5 DL/F1 10/Courier SF 15(12345678)98 50 S 256 54.5 72
54.5 DL 256 56.5 72 56.5 DL 15(1QPZRY9X8)77 66 S 256 70.5 72 70.5 DL 15
(2GF2TVDW0)77 80 S 256 84.5 72 84.5 DL 15(3S3JN54KH)77 94 S 256 98.5 72
98.5 DL 15(4CE6MUA7L)77 108 S 256 112.5 72 112.5 DL 237.5 40.5 237.5
112.5 DL 216.5 40.5 216.5 112.5 DL 195.5 40.5 195.5 112.5 DL 174.5 40.5
174.5 112.5 DL 153.5 40.5 153.5 112.5 DL 132.5 40.5 132.5 112.5 DL 111.5
40.5 111.5 112.5 DL 89.5 40.5 89.5 112.5 DL 91.5 40.5 91.5 112.5 DL 256
40.5 256 112.5 DL 72 40.5 72 112.5 DL F0(2d6)72 132 Q 214 136.5 72 136.5
DL F1 15(123456)98 146 S 214 150.5 72 150.5 DL 214 152.5 72 152.5 DL 36
(1Q)77 162 S 15(PZR)-21 G 214 166.5 72 166.5 DL 15(2Y9X8GF)77 176 S 214
180.5 72 180.5 DL 15(32TVDW0)77 190 S 214 194.5 72 194.5 DL 15(4S3JN54)
77 204 S 214 208.5 72 208.5 DL 15(5KHCE6M)77 218 S 214 222.5 72 222.5 DL
36(6U)77 232 S 15(A7L)-21 G 214 236.5 72 236.5 DL 195.5 136.5 195.5
236.5 DL 174.5 136.5 174.5 236.5 DL 153.5 136.5 153.5 236.5 DL 132.5
136.5 132.5 236.5 DL 111.5 136.5 111.5 236.5 DL 89.5 136.5 89.5 236.5 DL
91.5 136.5 91.5 236.5 DL 214 136.5 214 236.5 DL 72 136.5 72 236.5 DL

0 Cg EP
end

%%Page: 3 3
{ 10 dict begin
  /in exch def
  /out exch def
  16 out [ in out ] lagrange
  dup 1 eq {pop 0} if % X out trying to recover a share with itself.
  end
}
(Recover Share) /Symbol code2 /Courier code [ 32 permS 1 31 getinterval aload pop ] drawBottomWheelPage
showpage

%%Page: 4 4
% note 0 and 1 are never used, so they are removed from the wheel.
gsave
pgsize 2 div exch 2 div exch translate
360 64 div rotate
16 {
  newpath 0 6 40 mul moveto 0 28 rlineto stroke
  360 16 div rotate
} repeat
grestore
{gf32mul} (Translation) /Courier code /Symbol code2 [32 1 1 31 {} for] drawBottomWheelPage
showpage

%%Page: 5 5
{xor} (Addition) /Courier code 2 copy perm drawBottomWheelPage showpage

%%Page: 6 6
showTopWheelPage

%%Page: 7 7
showTopWheelPage

%%Page: 8 8
showTopWheelPage

%%Page: 9 9
    10 dict begin
    gsave

    72 720
    468 12
    (Constructing Shares)
    [
    (Before constructing shares, you must choose your threshold value k, which is the number of)
    (shares needed to reconstruct the secret, and must be between 2 and 31 inclusive. \(k = 1 can be)
    (achieved by simply duplicating the original secret, and k > 31 is mathematically impossible with)
    (this scheme.\) Be aware that the work required during recovery is quadratic in k, so values greater)
    (than 4 are not recommended. You also cannot generate more than 31 shares total.)
    ( )
    (Next, generate the "S" share, which is the unshared secret, as well as k - 1 more shares with)
    (consecutive indices starting from "A". These initial shares should be generated randomly using)
    (dice, affixed with a header, then checksummed. See the Dice Table page and the Checksum)
    (Worksheet for more details.)
    ( )
    (For the case k = 2, you will have only two shares, S and A, and there is a simplified method)
    (available to generate the remaining shares. Use each character from your S share to select a table)
    (from the following pages. Look up the row indexed by the corresponding character of your A)
    (share, then read the corresponding character for the C share from the first column. The character)
    (for the D share will be in the column after that, and so on.)
    ( )
    (The general scheme is more involved:)
    (    1. Choose the appropriate table from this page based on your choice of k.)
    (    2. Find the column corresponding to the share you wish to create.)
    (    3. Translate each initial share by its symbol from that column, using the Translation Wheel.)
    (    4. Add all the translated initial shares together using the Addition Wheel.)
    ( )
    (Tables for higher k can be easily generated by editing the source code of this file.)
    ]
    drawParagraph
    
    % EDITME
    % Edit these values to draw tables for larger k. Be warned that the total work to recover
    % a secret from k shares will be on the other of (48 + k - 1)k volvelle applications. For
    % k = 8 this is already over 250. And this is not even considering the logistics of keeping
    % eight distributed shares intact and available..
    /mink 2 def
    /maxk 6 def
    
    /x 104 def
    /y 400 def
    mink 1 maxk {
        /k exch def
    
        x y moveto
        0 1 k {
            x y moveto
            /Courier-Bold findfont 12 scalefont setfont
            /rowidx exch def
            rowidx 0 eq {
                % First row (heading)
                /rowtitle (k =   ) def
                k rowtitle 4 2 getinterval cvs
                rowtitle show
    
                mink 1 k { 12 0 rmoveto } for
                k 1 31 {
                    permS exch get code exch 1 getinterval gsave centreshow grestore
                    12 0 rmoveto
                } for % horizontal loop
            } {
                % Symbol rows
                /rowtitle (      ) def
                /xinterp rowidx 1 sub def % x coord to interpolate at
                rowtitle 2 permS xinterp get code exch 1 getinterval putinterval
                rowtitle show
    
                /Symbol findfont 12 scalefont setfont
                mink 1 k { 12 0 rmoveto } for
                k 1 31 {
                    permS exch get  % x coord to evaluate at
                    permS xinterp get % x coord to interpolate at
                    permS 0 k getinterval % x coords to interpolate at
                    lagrange % symbol
                    code2 exch 1 getinterval gsave centreshow grestore % print symbol
                    12 0 rmoveto
                } for % horizontal loop
            } ifelse
    
    
            /y y 11 sub def
        } for % vertical loop
    
        /y y 20 sub def
    } for

    end
showpage

%%Page: 10 10
29 24 13 25 showShareTablePage

%%Page: 11 11
9 8 23 18 showShareTablePage

%%Page: 12 12
22 31 27 19 showShareTablePage

%%Page: 13 13
1 0 3 16 showShareTablePage

%%Page: 14 14
11 28 12 14 showShareTablePage

%%Page: 15 15
6 4 2 15 showShareTablePage

%%Page: 16 16
10 17 21 20 showShareTablePage

%%Page: 17 17
26 30 7 5 showShareTablePage

%%Page: 18 18
   10 dict begin

   gsave
   /title (Multiplicaton) def
   /angle 360 31 div neg def
   % Move cursor to center of page
   pgsize 2 div exch 2 div exch translate
   % Draw white interior circle
   newpath 0 0 6 40 mul 29 sub 0 360 arc stroke
   newpath 0 0 6 40 mul 0 360 arc stroke
   newpath 0 0 6 0 360 arc stroke
   % Draw letters
   /Helvetica findfont 6 scalefont setfont
   gsave
   0 360 8 div 360 {title 6 2 index 234 outsidecircletext} for
   grestore
   /Symbol findfont 18 scalefont setfont
   permP 1 31 getinterval {0 38 sqrt 40 mul 29 sub moveto code2 exch 1 getinterval centreshow angle rotate} forall
   grestore

   end

showpage

%%Page: 19 19
   10 dict begin

   gsave
   /title (Multiplicaton) def
   /angle 360 31 div neg def
   % Move cursor to center of page
   pgsize 2 div exch 2 div exch translate
   % Draw white interior circle
   newpath 0 0 6 40 mul 29 sub 0 360 arc stroke
   % Draw centre cross
   newpath 0 6 moveto 0 -6 lineto stroke
   newpath 6 0 moveto -6 0 lineto stroke
   % Draw title
   /Helvetica findfont 12 scalefont setfont
   title 12 270 30 insidecircletext
   % Draw letters
   /Symbol findfont 18 scalefont setfont
   /sz 8 def
   permP 1 31 getinterval {
      0 24 sqrt 40 mul sz 2 mul sub moveto code2 exch 1 getinterval centreshow
      % Draw indicator arrow
      newpath 0 6 40 mul 29 sub moveto sz sz 2 mul neg rlineto sz 2 mul neg 0 rlineto closepath fill
      angle rotate
      /sz 3 def
   } forall
   grestore

   end
showpage

%%Page: 20 20
    10 dict begin
    gsave

    72 720
    468 12
    (Recovering the Secret)
    [
    (Recovering a secret is very similar to constructing the shares: the process is to assemble k shares,)
    (find translation symbols for each of them, then add the translated shares together.)
    ( )
    (However, unlike the situation when constructing shares, the translation symbols to use depend on)
    (the indices of the specific shares used for reconstruction. Since for large k, there are millions)
    (of possible sets of indices, we cannot provide compact tables. \(Although for the specific case)
    (k = 3, there are only about 4500 possibilities, and we have provided a table in Appendix B.\))
    ( )
    (In detail, the recovery process is as follows.)
    (    1. Assemble exactly k shares. If you have more than k available, set all but k aside.)
    (    2. For each share, spin the Recovery Share volvelle to point at that share's index.)
    (    3. Look up the symbols for the k-1 other shares.)
    (    4. Using the Multiplication Slide Ruler, or the Multiplication Table, multiply all these symbols.)
    (    5. Translate the share using the result of the multiplication)
    (    6. Repeat steps 2-5 for all k shares.)
    (    7. Add together all k translated shares.)
    ( )
    (Notice that when k = 2, Step 3 involves only a single lookup and Step 4 is vacuous.)
    ( )
    (For k = 3, Step 3 involves lookup up two indices and Step 4 involves a single multiplication.)
    (Alternately, in Appendix B, a precomputed symbol is provided. Order the available shares)
    (alphabetically by index, with letters preceding numbers, and look them up their three symbols)
    (in the table.)
    ]
    drawParagraph

    grestore
    end
showpage

%%Page: 21 21
    10 dict begin
    gsave

    /Helvetica-bold findfont 10 scalefont setfont
    pgsize 40 sub exch 2 div exch
    moveto (Appendix B: 3-of-N Recovery Symbol Table) centreshow

    /x 48 def
    /y 735 def

    1 2 3
    1 1 12 {
        pop % drop the array index
        x y 75 draw3tablecolumn
        /x x 43 add def
    } for

    grestore
    end
showpage

%%Page: 22 22
    10 dict begin
    gsave

    /Helvetica-bold findfont 10 scalefont setfont
    pgsize 40 sub exch 2 div exch
    moveto (Appendix B: 3-of-N Recovery Symbol Table) centreshow

    /x 48 def
    /y 735 def

    3 6 13
    1 1 12 {
        pop % drop the array index
        x y 75 draw3tablecolumn
        /x x 43 add def
    } for

    grestore
    end
showpage

%%Page: 23 23
    10 dict begin
    gsave

    /Helvetica-bold findfont 10 scalefont setfont
    pgsize 40 sub exch 2 div exch
    moveto (Appendix B: 3-of-N Recovery Symbol Table) centreshow

    /x 48 def
    /y 735 def

    5 17 28
    1 1 12 {
        pop % drop the array index
        x y 75 draw3tablecolumn
        /x x 43 add def
    } for

    grestore
    end
showpage

%%Page: 24 24
    10 dict begin
    gsave

    /Helvetica-bold findfont 10 scalefont setfont
    pgsize 40 sub exch 2 div exch
    moveto (Appendix B: 3-of-N Recovery Symbol Table) centreshow

    /x 48 def
    /y 735 def

    8 24 29
    1 1 12 {
        pop % drop the array index
        x y 75 draw3tablecolumn
        /x x 43 add def
    } for

    grestore
    end
showpage

%%Page: 25 25
    10 dict begin
    gsave

    /Helvetica-bold findfont 10 scalefont setfont
    pgsize 40 sub exch 2 div exch
    moveto (Appendix B: 3-of-N Recovery Symbol Table) centreshow

    /x 48 def
    /y 735 def

    13 18 31
    1 1 7 {
        pop % drop the array index
        x y 75 draw3tablecolumn
        /x x 43 add def
    } for
    % Shorten last 5 columns by 1
    1 1 5 {
        pop % drop the array index
        x y 74 draw3tablecolumn
        /x x 43 add def
    } for

    grestore
    end
showpage

%%Page: 26 26
/Helvetica-bold findfont 10 scalefont setfont
pgsize 40 sub exch 2 div exch
moveto (ms32 Checksum Table) centreshow

0 1 31 {
0 1 31 {
2 copy 730 exch 7 mul sub 1 index 11 idiv 240 mul sub exch 11 mod 50 mul 30 add exch moveto
2 copy
perm exch get exch perm exch get exch
2 copy
code exch get exch code exch get exch
2 string dup 1 4 3 roll put dup 0 4 3 roll put
/Courier-Bold findfont polymodulus length 6 le {8} {4.5} ifelse scalefont setfont
show
3 0 rmoveto
polymodulus length string
3 1 roll
polymodshift2 0 1 polymodulus length 1 sub { 3 copy get code exch get 3 2 roll exch put } for
pop
/Courier findfont polymodulus length 6 le {8} {4.5} ifelse scalefont setfont
show
pop
} for
pop
} for
showpage

%%Page: 27 27
%%PageOrientation: Landscape
90 rotate 0 -750 translate
/hrp (ms) def
/thick 1 def
/thin 0.2 def
/box {
  10 dict begin
  { /width /beginred /n } {exch def} forall
  -1.2 -1.9 rmoveto
  0 14 rlineto
  arraySpace 0 rlineto
  0 -14 rlineto
  closepath
  width setlinewidth
  n beginred ge { gsave 1 0.9 0.9 setrgbcolor fill grestore } if
  stroke
  end
} bind def

/labeledbox {
  10 dict begin
  { /beginred /n } {exch def} forall
  /n n hrp length add 2 add def
  gsave
    n beginred thick box
  grestore
  gsave
    arraySpace 6 sub 14 5 sub rmoveto
    /Courier findfont 3 scalefont setfont
    n 10 le { ( ) show } if n 2 string cvs show
  grestore
  end
} bind def
/Helvetica-Bold findfont 10 scalefont setfont
pgsize exch pop 2 div 700
moveto (ms32 Checksum Worksheet) centreshow

/Courier findfont 15 scalefont setfont

120 670
% [10 29 19 13 4 16 20 8 16 7 4 13 6 8 27 31 28 14 17 21 31 25 19 15 1 3 13 29 22 5 8 31 9 17 15 30 19 15 21 16 19 26 16 22 31]
[ 45 {32} repeat ]
10 dict begin
{ /codeword /y /x } {exch def} forall
x y moveto hrp (1) concatstrings dup stringwidth pop neg 3 sub 0 rmoveto show
/odd polymodulus length codeword length add 2 mod def
/edge codeword length polymodulus length sub hrp length add 2 add def
/k polymodulus length odd sub def
  {edge labeledbox} x arraySpace odd mul add y codeword 0 k showArrayBox
/y y 14 sub def
/reduction [hrp polymodhrp aload pop k {0} repeat ] polymod0 def
  {reduction length thin box} x arraySpace odd mul add y reduction odd k showArrayBox
/y y 15 sub def
/residue reduction [1 odd eq {0} if codeword 0 k getinterval aload pop ] gf32addarray def

{
  k codeword length ge {exit} if
  { codeword length k sub thin box} x y residue dup length 0 exch showArrayBox
  {edge labeledbox} x arraySpace polymodulus length mul add y codeword k 2 showArrayBox
  /x x arraySpace 2 mul add def
  /y y 14 sub def
  /reduction residue 0 2 getinterval aload pop polymodshift2 def
  {reduction length thin box} x y reduction dup length 0 exch showArrayBox
  /y y 15 sub def
  /residue reduction [residue 2 polymodulus length 2 sub getinterval aload pop codeword k 2 getinterval aload pop] gf32addarray def
  /k k 2 add def
} loop

gsave 0.85 setgray x y checksum dup length 0 exch showArray grestore
{residue length thin box} x y residue dup length 0 exch showArrayBox


end

100 420 moveto
/Helvetica-bold findfont 10 scalefont setfont
(Verifying Checksums) show
100 400 moveto
/Helvetica findfont 9 scalefont setfont
(Write out the 45 character data portion in the) show
100 390 moveto
(bold boxes, two at a time, starting on the top) show
100 380 moveto
(row.  Working from the top row down, look up) show
100 370 moveto
(the first two characters of each odd row in the) show
100 360 moveto
(ms32 Checksum Table and write the ) polymodulus length 10 string cvs concatstrings show
100 350 moveto
(character word into the even row below it.  Fill) show
100 340 moveto
(in the odd rows by adding the two characters) show
100 330 moveto
(above each cell.  You may use either the) show
100 320 moveto
(addition wheel table.  The first few boxes are) show
100 310 moveto
(already filled in for you.  The last row will sum) show
100 300 moveto
(to ) checksumstring ( if the checksum is valid.) concatstrings concatstrings show
100 260 moveto
/Helvetica-bold findfont 10 scalefont setfont
(Creating Checksums) show
100 240 moveto
/Helvetica findfont 9 scalefont setfont
(Follow the "Verifying Checksums" instructions) show
100 230 moveto
(to fill in everything but the shaded cells. To fill in) show
100 220 moveto
(the shaded cells, write ) checksumstring ( into the bottom) concatstrings concatstrings show
100 210 moveto
(row.  Working from the bottom up, fill in the) show
100 200 moveto
(shaded cells by adding the two characters below) show
100 190 moveto
(each cell.  The ) polymodulus length 10 string cvs ( characters in the bold shaded) concatstrings concatstrings show
100 180 moveto
(boxes will be the checksum.) show

450 650
/offsety exch def
/offsetx exch def
/Courier findfont 10 scalefont setfont
20 offsetx add offsety moveto (Addition Table) show
/Courier-Bold findfont 8 scalefont setfont
0 1 31 {
dup 2 add 7 mul offsetx add offsety 10 sub moveto
perm exch get
code exch 1 getinterval show
} for

0 1 31 {
/Courier-Bold findfont 8 scalefont setfont
offsetx 34.5 7 mul add offsety 20 sub 2 index 8 mul sub moveto
dup code exch perm exch get 1 getinterval show
/Courier findfont 8 scalefont setfont
dup 1 31 {
dup 2 add 7 mul offsetx add offsety 20 sub 3 index 8 mul sub moveto
perm exch get
perm 2 index get gf32add code exch 1 getinterval show
} for pop } for
showpage
%%EOF
